#!/usr/bin/env bash


SUBMODULES_PATH=${SUBMODULES_PATH:-$(realpath .)}
source "${SUBMODULES_PATH}/ci_teststand/ci_core.sh" 
source "${SUBMODULES_PATH}/ci_teststand/ci_utils.sh" 
source ci.env
source "${SUBMODULES_PATH}/ci_teststand/tests/common_tests.sh"
source "${SUBMODULES_PATH}/ci_teststand/tests/docker_tests.sh"
source "${SUBMODULES_PATH}/ci_teststand/tests/file_tests.sh"
#source "${SUBMODULES_PATH}/ci_teststand/.static_checking_tests"
source .tests 

libadore_runtime_build(){
    local action=runtime build
    local name="libadore testing runtime build"
    local description="builds the libadore testing runtime"
    local status=""
    local message=""
    printf "\n"
    printf "  Test: %s\n" "${name}"
    printf "    Description: %s\n" "${description}"
    printf "    Project: %s\n" "${project}"
    if docker compose build; then
        printf "\n"
        printf "  Action: %s\n" "$(bold ${action})"
        message="docker compose succeeded"
        printf "    Message: %s\n" "${message}"
        status=$(bold $(green "PASSED"))
        printf "    Status: %s: %s\n" "${action}" "${status}"
    else
        printf "\n"
        printf "  Action: %s\n" "$(bold ${action})"
        message="docker compose failed"
        printf "    Message: %s\n" "${message}"
        status=$(bold $(red "FAILED"))
        printf "    Status: %s: %s\n" "${action}" "${status}"
        exit 1
    fi
}

build(){
    ci_common_build
    libadore_runtime_build 
}

test(){
    ci_common_test
}

static_check(){
    make lizard
}


ci_run "$@"
